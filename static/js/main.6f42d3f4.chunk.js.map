{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","exportToPdf","doc","jsPDF","exportDraw","imgData","document","getElementById","toDataURL","addImage","save","handleChange","name","event","target","value","setState","defineProperty","displayedScale","state","columns","rows","width","height","margin","scale","draw","_this$state","c","side","i","ctx","getContext","clearRect","beginPath","lineWidth","widthOffset","heightOffset","moveTo","lineTo","stroke","_this$state2","react_default","a","createElement","className","style","marginRight","type","onChange","onClick","id","position","opacity","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mNCsIzBC,cA9Hb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QA+EFI,YAAc,WACZ,IAAMC,EAAM,IAAIC,IAEhBT,EAAKU,aACL,IACMC,EADSC,SAASC,eAAe,gBAChBC,UAAU,aAEjCN,EAAIO,SAASJ,EAAS,MAAO,EAAG,EAAG,IAAK,KAExCH,EAAIQ,KAAK,kBAzFEhB,EA4FbiB,aAAe,SAAAC,GAAI,OAAI,SAAAC,GAClBA,EAAMC,OAAOC,MAAQ,IACtBrB,EAAKsB,SAALrB,OAAAsB,EAAA,EAAAtB,CAAA,GAAgBiB,EAAO,MACdC,EAAMC,OAAOC,MAAQ,EAC9BrB,EAAKsB,SAALrB,OAAAsB,EAAA,EAAAtB,CAAA,GAAgBiB,EAAO,IAEvBlB,EAAKsB,SAALrB,OAAAsB,EAAA,EAAAtB,CAAA,GAAgBiB,EAAOC,EAAMC,OAAOC,UAhGtCrB,EAAKwB,eAAiB,EACtBxB,EAAKyB,MAAQ,CACXC,QAAS,EACTC,KAAM,EACNC,MAAO,IAAM5B,EAAKwB,eAClBK,OAAQ,IAAM7B,EAAKwB,eACnBM,OAAQ,GAAK9B,EAAKwB,gBAEpBxB,EAAK+B,MAAQ,GACb/B,EAAK8B,OAAS,GAAK9B,EAAK+B,MACxB/B,EAAK4B,MAAQ,IAAM5B,EAAK+B,MACxB/B,EAAK6B,OAAS,IAAM7B,EAAK+B,MAbd/B,mFAiBXG,KAAK6B,sCAGA,IAAAC,EAC4C9B,KAAKsB,MAA9CE,EADHM,EACGN,KAAMD,EADTO,EACSP,QAASI,EADlBG,EACkBH,OAAQF,EAD1BK,EAC0BL,MAAOC,EADjCI,EACiCJ,OAChCK,EAAItB,SAASC,eAAe,iBAClC,GAAGqB,EAAE,CACH,IAEIC,EAAMC,EAFJC,EAAMH,EAAEI,WAAW,MACzBD,EAAIE,UAAU,EAAG,EAAGL,EAAEN,MAAOM,EAAEL,QAG7BM,EADCP,EAAMC,EAASH,EAAQC,GAChBC,EAAQ,EAAIE,GAAUJ,GAEtBG,EAAS,EAAIC,GAAUH,EAEjCU,EAAIG,YACJH,EAAII,UAAY,EAEhB,IAAMC,EAAcd,EAAM,EAAKF,EAAUS,EAAM,EACzCQ,EAAed,EAAO,EAAKF,EAAOQ,EAAM,EAE9C,IAAIC,EAAI,EAAGA,GAAKV,EAASU,IACvBC,EAAIO,OAAOR,EAAED,EAAOO,EAAa,EAAIC,GACrCN,EAAIQ,OAAOT,EAAED,EAAOO,EAAaf,EAAOQ,EAAOQ,GAGjD,IAAIP,EAAI,EAAGA,GAAKT,EAAMS,IACpBC,EAAIO,OAAO,EAAIF,EAAaN,EAAID,EAAOQ,GACvCN,EAAIQ,OAAOnB,EAAUS,EAAOO,EAAaN,EAAID,EAAOQ,GAEtDN,EAAIS,+CAIK,IAKPX,EAAMC,EALCW,EACe5C,KAAKsB,MAAvBE,EADGoB,EACHpB,KAAMD,EADHqB,EACGrB,QACRQ,EAAItB,SAASC,eAAe,gBAC5BwB,EAAMH,EAAEI,WAAW,MACzBD,EAAIE,UAAU,EAAG,EAAGL,EAAEN,MAAOM,EAAEL,QAG7BM,EADChC,KAAKyB,MAAMzB,KAAK0B,OAASH,EAAQC,GAC1BxB,KAAKyB,MAAQ,EAAIzB,KAAK2B,QAAUJ,GAEhCvB,KAAK0B,OAAS,EAAI1B,KAAK2B,QAAUH,EAE3CU,EAAIG,YACJH,EAAII,UAAY,EAEhB,IAAMC,EAAcvC,KAAKyB,MAAM,EAAKF,EAAUS,EAAM,EAC9CQ,EAAexC,KAAK0B,OAAO,EAAKF,EAAOQ,EAAM,EAEnD,IAAIC,EAAI,EAAGA,GAAKV,EAASU,IACvBC,EAAIO,OAAOR,EAAED,EAAOO,EAAa,EAAIC,GACrCN,EAAIQ,OAAOT,EAAED,EAAOO,EAAaf,EAAOQ,EAAOQ,GAGjD,IAAIP,EAAI,EAAGA,GAAKT,EAAMS,IACpBC,EAAIO,OAAO,EAAIF,EAAaN,EAAID,EAAOQ,GACvCN,EAAIQ,OAAOnB,EAAUS,EAAOO,EAAaN,EAAID,EAAOQ,GAEtDN,EAAIS,0CA2BJ,OADA3C,KAAK6B,OAEHgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,8CACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,YAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,SAAOE,MAAO,CAACC,YAAa,KAA5B,cACaL,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SAASjC,MAAOlB,KAAKsB,MAAMC,QAAS6B,SAAUpD,KAAKc,aAAa,cAEzF+B,EAAAC,EAAAC,cAAA,yBACWF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SAASjC,MAAOlB,KAAKsB,MAAME,KAAM4B,SAAUpD,KAAKc,aAAa,YAGtF+B,EAAAC,EAAAC,cAAA,UAAQM,QAASrD,KAAKI,YAAa4C,UAAU,UAA7C,mBACAH,EAAAC,EAAAC,cAAA,UAAQO,GAAG,gBAAgBN,UAAU,0BAA0BvB,MAAO,IAAMzB,KAAKqB,eAAgBK,OAAQ,IAAM1B,KAAKqB,iBACpHwB,EAAAC,EAAAC,cAAA,UAAQO,GAAG,eAAeN,UAAU,SAASvB,MAAO,IAAMzB,KAAK4B,MAAOF,OAAQ,IAAM1B,KAAK4B,MAAOqB,MAAO,CAACM,SAAU,WAAYC,QAAS,aA1H7HC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASxD,SAASC,eAAe,SD2H3C,kBAAmBwD,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6f42d3f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport jsPDF from 'jspdf';\n\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.displayedScale = 2;\n    this.state = {\n      columns: 3,\n      rows: 4,\n      width: 210 * this.displayedScale,\n      height: 297 * this.displayedScale,\n      margin: 15 * this.displayedScale,\n    }\n    this.scale = 10;\n    this.margin = 15 * this.scale;\n    this.width = 210 * this.scale;\n    this.height = 297 * this.scale;\n  }\n\n  componentDidMount() {\n    this.draw();\n  }\n\n  draw() {\n    const { rows, columns, margin, width, height } = this.state;\n    const c = document.getElementById(\"displayCanvas\");\n    if(c){\n      const ctx = c.getContext(\"2d\");\n      ctx.clearRect(0, 0, c.width, c.height);\n      let side, i;\n      if(width/height < columns/rows) {\n        side = (width - 2 * margin) / columns;\n      } else {\n        side = (height - 2 * margin) / rows;\n      }\n      ctx.beginPath();\n      ctx.lineWidth = 2;\n  \n      const widthOffset = width/2 - (columns * side)/2;\n      const heightOffset = height/2 - (rows * side)/2;\n  \n      for(i = 0; i <= columns; i++){\n        ctx.moveTo(i*side + widthOffset, 0 + heightOffset);\n        ctx.lineTo(i*side + widthOffset, rows * side + heightOffset);\n      }\n  \n      for(i = 0; i <= rows; i++){\n        ctx.moveTo(0 + widthOffset, i * side + heightOffset);\n        ctx.lineTo(columns * side + widthOffset, i * side + heightOffset);\n      }\n      ctx.stroke();\n    }\n  }\n\n  exportDraw() {\n    const { rows, columns } = this.state;\n    const c = document.getElementById(\"exportCanvas\");\n    const ctx = c.getContext(\"2d\");\n    ctx.clearRect(0, 0, c.width, c.height);\n    let side, i;\n    if(this.width/this.height < columns/rows) {\n      side = (this.width - 2 * this.margin) / columns;\n    } else {\n      side = (this.height - 2 * this.margin) / rows;\n    }\n    ctx.beginPath();\n    ctx.lineWidth = 4;\n\n    const widthOffset = this.width/2 - (columns * side)/2;\n    const heightOffset = this.height/2 - (rows * side)/2;\n\n    for(i = 0; i <= columns; i++){\n      ctx.moveTo(i*side + widthOffset, 0 + heightOffset);\n      ctx.lineTo(i*side + widthOffset, rows * side + heightOffset);\n    }\n\n    for(i = 0; i <= rows; i++){\n      ctx.moveTo(0 + widthOffset, i * side + heightOffset);\n      ctx.lineTo(columns * side + widthOffset, i * side + heightOffset);\n    }\n    ctx.stroke();\n  }\n\n  exportToPdf = () => {\n    const doc = new jsPDF();\n \n    this.exportDraw();\n    const canvas = document.getElementById(\"exportCanvas\");\n    const imgData = canvas.toDataURL('image/png');\n  // Generate PDF\n    doc.addImage(imgData, 'PNG', 0, 0, 210, 297);\n    // doc.text('Hello world!', 10, 10)\n    doc.save('grille_a4.pdf')\n  }\n\n  handleChange = name => event => {\n    if(event.target.value > 100){\n      this.setState({[name]: 100});\n    } else if (event.target.value < 1) {\n      this.setState({[name]: 1});\n    } else {\n      this.setState({[name]: event.target.value});\n    }\n  }\n  \n  render() {\n    this.draw();\n    return (\n      <div className=\"app\">\n        <div className=\"title-container\">\n          <h1>Générateur de grilles pour</h1>\n          <h1 className=\"big-title\">Emelyne</h1>\n        </div>\n        <div className=\"input-container\">\n          <label style={{marginRight: 20}}>\n            Colonnes : <input type=\"number\" value={this.state.columns} onChange={this.handleChange('columns')} />\n          </label>\n          <label>\n            Lignes : <input type=\"number\" value={this.state.rows} onChange={this.handleChange('rows')}/>\n          </label>\n        </div>\n        <button onClick={this.exportToPdf} className=\"button\">Exporter en pdf</button>\n        <canvas id=\"displayCanvas\" className=\"canvas displayed-canvas\" width={210 * this.displayedScale} height={297 * this.displayedScale}></canvas>\n        <canvas id=\"exportCanvas\" className=\"canvas\" width={210 * this.scale} height={297 * this.scale} style={{position: 'absolute', opacity: 0}}></canvas>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}